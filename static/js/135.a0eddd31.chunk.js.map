{"version":3,"file":"static/js/135.a0eddd31.chunk.js","mappings":"2MAEaA,EAAOC,EAAAA,EAAAA,GAAH,8JAUJC,EAAWD,EAAAA,EAAAA,GAAH,0DAIRE,GAAeF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,gF,iDCRZI,EAAY,WACvB,OAAuCC,EAAAA,EAAAA,MAAzBC,EAAd,EAAQC,KAAgBC,EAAxB,EAAwBA,WACxB,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,GAC3BC,GAAWC,EAAAA,EAAAA,MAgBjB,OAdAC,EAAAA,EAAAA,YAAU,WACR,GAA4B,IAAxBL,EAAaM,OAAc,CAC7B,IAAMC,EAAeP,EAAaQ,MAChC,qBAAGC,QAAH,IACAA,SAIF,OAFAN,EAAS,SAAD,OAAUI,GAAgB,CAAEG,SAAS,SAC7CX,EAAkB,CAACQ,GAEpB,CAEDR,EAAkBL,GAAY,GAC/B,GAAE,CAACK,EAAmBI,EAAUH,EAAcN,KAG7C,UAACP,EAAD,WACGW,EAAeQ,OAAS,IACvB,SAACjB,EAAD,WACE,SAACC,EAAD,CAAcqB,GAAE,iBAAhB,wBADY,QAIdf,GACAE,EAAec,KAAI,SAAAH,GAAQ,OACzB,SAACpB,EAAD,WACE,UAACC,EAAD,CAAcqB,GAAE,gBAAWF,GAA3B,cACIA,EADJ,cADaA,EADU,IAOF,IAA1BX,EAAeQ,SACd,SAACjB,EAAD,uEAAc,UAMrB,C,kFClCD,UAXc,WACZ,OACE,UAAC,IAAD,YACE,SAAC,IAAD,KACA,SAAC,EAAAwB,SAAD,CAAUC,UAAU,4CAApB,UACE,SAAC,KAAD,QAIP,C,qECZYC,E,QAAe3B,EAAAA,IAAH,yC","sources":["components/StorePage/ShopsList/ShopsList.styled.jsx","components/StorePage/ShopsList/ShopsList.jsx","pages/Store/Store.jsx","pages/Store/Store.styled.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\nexport const List = styled.ul`\n  display: flex;\n  flex-shrink: 0;\n  flex-direction: column;\n  gap: 10px;\n  width: 200px;\n  list-style: none;\n  padding: 20px;\n`;\n\nexport const ListItem = styled.li`\n  padding: 10px;\n  width: 100%;\n`;\nexport const CategoryLink = styled(NavLink)`\n  text-transform: uppercase;\n  text-decoration: none;\n`;\n","import { useGetShopsQuery } from 'redux/productsSlice';\nimport { CategoryLink, List, ListItem } from './ShopsList.styled';\nimport { useSelector } from 'react-redux';\n\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getShoppingCart } from 'redux/selectors';\n\nexport const ShopsList = () => {\n  const { data: allShops, isFetching } = useGetShopsQuery();\n  const [availableShops, setAvailableShops] = useState([]);\n  const shoppingCart = useSelector(getShoppingCart);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (shoppingCart.length !== 0) {\n      const selectedShop = shoppingCart.find(\n        ({ category }) => category\n      ).category;\n\n      navigate(`store/${selectedShop}`, { replace: true });\n      setAvailableShops([selectedShop]);\n      return;\n    }\n\n    setAvailableShops(allShops || []);\n  }, [setAvailableShops, navigate, shoppingCart, allShops]);\n\n  return (\n    <List>\n      {availableShops.length > 1 && (\n        <ListItem key=\"All\">\n          <CategoryLink to={`store/allShops`}>All shops</CategoryLink>\n        </ListItem>\n      )}\n      {!isFetching &&\n        availableShops.map(category => (\n          <ListItem key={category}>\n            <CategoryLink to={`store/${category}`}>\n              \"{category}\" STORE\n            </CategoryLink>\n          </ListItem>\n        ))}\n      {availableShops.length === 1 && (\n        <ListItem key=\"warn\">\n          You can buy products only from one shop at the same time.\n        </ListItem>\n      )}\n    </List>\n  );\n};\n","import { ShopsList } from 'components/StorePage/ShopsList/ShopsList';\nimport { StoreWrapper } from './Store.styled';\nimport { Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\n\nconst Store = () => {\n  return (\n    <StoreWrapper>\n      <ShopsList />\n      <Suspense fallback={<div>Please wait...</div>}>\n        <Outlet />\n      </Suspense>\n    </StoreWrapper>\n  );\n};\n\nexport default Store;\n","import styled from '@emotion/styled';\n\nexport const StoreWrapper = styled.div`\n  display: flex;\n`;\n"],"names":["List","styled","ListItem","CategoryLink","NavLink","ShopsList","useGetShopsQuery","allShops","data","isFetching","useState","availableShops","setAvailableShops","shoppingCart","useSelector","getShoppingCart","navigate","useNavigate","useEffect","length","selectedShop","find","category","replace","to","map","Suspense","fallback","StoreWrapper"],"sourceRoot":""}
{"version":3,"file":"static/js/521.62189a7c.chunk.js","mappings":"kQAGaA,EAAOC,EAAAA,EAAAA,GAAH,sGAOJC,EAAWD,EAAAA,EAAAA,GAAH,4DAKRE,GAAeF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,8SAcZI,EAAOJ,EAAAA,EAAAA,IAAH,iH,sJC3BJK,EAAUL,EAAAA,EAAAA,KAAH,oLAWPM,EAAYN,EAAAA,EAAAA,MAAH,qOAWTO,EAAiBP,EAAAA,EAAAA,MAAH,wHAQdQ,EAAaR,EAAAA,EAAAA,KAAH,qIAQVS,EAAeT,EAAAA,EAAAA,OAAH,6hB,0DC3BZU,EAAY,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,oBAAqBC,EAAmB,EAAnBA,aACzCC,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MACXE,GAAUF,EAAAA,EAAAA,MACVG,GAAYH,EAAAA,EAAAA,MAEZI,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,WACHC,OAAQL,EAAAA,KAELG,QACC,2DACA,gGAEDC,WACHE,MAAON,EAAAA,KAEJG,QAAQ,yCAA0C,sBAClDC,aAGL,GAKIG,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYV,KALtBW,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAKf,OACE,SAAC,IAAD,WACE,UAAC3B,EAAD,CACE6B,aAAa,MACbC,SAAUL,GAAa,SAAAM,GACrBL,EAAM,CAAEV,KAAM,GAAIG,OAAQ,GAAIa,QAAS,GAAIZ,MAAO,KAClDb,EAAawB,EACd,IALH,WAOE,SAAC7B,EAAD,CAAgB+B,QAASzB,EAAzB,mBACA,SAACP,GAAD,gBACEiC,KAAK,QACDV,EAAS,SAFf,IAGEW,GAAI3B,EACJ4B,YAAY,kBAEbT,EAAOX,OAAQ,SAACb,EAAD,UAAawB,EAAOX,KAAKqB,WACzC,SAACnC,EAAD,CAAgB+B,QAASvB,EAAzB,qBACA,SAACT,GAAD,gBACEiC,KAAK,QACDV,EAAS,WAFf,IAGEW,GAAIzB,EACJ0B,YAAY,gBAEbT,EAAOR,SAAU,SAAChB,EAAD,UAAawB,EAAOR,OAAOkB,WAC7C,SAACnC,EAAD,CAAgB+B,QAAStB,EAAzB,oBACA,SAACV,GAAD,gBACEiC,KAAK,QACDV,EAAS,UAFf,IAGEW,GAAIxB,EACJyB,YAAY,kBAEbT,EAAOP,QAAS,SAACjB,EAAD,UAAawB,EAAOP,MAAMiB,WAC3C,SAACnC,EAAD,CAAgB+B,QAASrB,EAAzB,sBACA,SAACX,GAAD,gBACEiC,KAAK,QACDV,EAAS,YAFf,IAGEW,GAAIvB,EACJwB,YAAY,6BAEbT,EAAOK,UAAW,SAAC7B,EAAD,UAAawB,EAAOK,QAAQK,WAC/C,SAACjC,EAAD,CAAc8B,KAAK,SAASI,SAAUhC,EAAtC,wBAMP,E,UC9FYZ,EAAOC,EAAAA,EAAAA,GAAH,oNCAJ4C,EAAc5C,EAAAA,EAAAA,GAAH,mUAgBX6C,EAAY7C,EAAAA,EAAAA,IAAH,kFAMT8C,EAAY9C,EAAAA,EAAAA,GAAH,wFAMT+C,EAAkB/C,EAAAA,EAAAA,EAAH,kOAYfgD,EAAkBhD,EAAAA,EAAAA,IAAH,oHAOfiD,EAAYjD,EAAAA,EAAAA,EAAH,+DAKTkD,EAAkBlD,EAAAA,EAAAA,OAAH,mZ,oBCpDfmD,EAAiBnD,EAAAA,EAAAA,IAAH,+MAWdoD,EAAuBpD,EAAAA,EAAAA,OAAH,gjBAyBpBqD,EAAUrD,EAAAA,EAAAA,EAAH,kF,UC3BPsD,EAAkB,SAAC,GAAsB,IAApBd,EAAmB,EAAnBA,GAAIe,EAAe,EAAfA,SACpC,GAAwCC,EAAAA,EAAAA,UAASD,GAAjD,eAAOE,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAsC,IAAjBJ,EAM3B,OAJAK,EAAAA,EAAAA,YAAU,WACRH,GAASI,EAAAA,EAAAA,GAAevB,EAAIiB,GAC7B,GAAE,CAACA,EAAcE,EAAUnB,KAG1B,UAACW,EAAD,YACE,SAACC,EAAD,CACEY,QAAS,WACPN,EAAgBD,EAAe,EAChC,EAHH,UAKE,SAAC,MAAD,OAEF,SAACJ,EAAD,UAAUI,KACV,SAACL,EAAD,CACEY,QAAS,WACPN,EAAgBD,EAAe,EAChC,EACDd,SAAUkB,EAJZ,UAME,SAAC,MAAD,QAIP,EC1BYI,GAAmB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3BP,GAAWC,EAAAA,EAAAA,MAETO,EAAmDD,EAAnDC,MAAOC,EAA4CF,EAA5CE,MAAO5B,EAAqC0B,EAArC1B,GAAIe,EAAiCW,EAAjCX,SAAUc,EAAuBH,EAAvBG,YAAaC,EAAUJ,EAAVI,MAE3CC,EAAoBC,KAAKC,MAAMlB,EAAWe,GAEhD,OACE,UAAC1B,EAAD,YACE,SAACC,EAAD,CAAW6B,IAAKP,EAAOQ,IAAKP,EAAOQ,MAAM,UACzC,SAAC9B,EAAD,UAAYsB,KACZ,SAACrB,EAAD,UAAkBsB,KAClB,SAACf,EAAD,CAAiBC,SAAUA,EAAUf,GAAIA,KACzC,UAACQ,EAAD,YACE,uCACS,UAACC,EAAD,WAAYuB,KAAKC,MAAMF,GAAvB,iBAET,UAACrB,EAAD,CACEc,QAAS,WACPL,GAASkB,EAAAA,EAAAA,IAAcrC,GACxB,EAHH,qBAKS,SAAC,MAAD,YAKhB,ECrCYsC,GAAmB,WAC9B,IAAMC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAV,IAElC,OACE,SAACnF,EAAD,UACGgF,EAASI,KAAI,SAAAjB,GAAO,OACnB,SAACD,GAAD,CAAmCC,QAASA,GAArBA,EAAQ1B,GADZ,KAK1B,ECZY4C,GAAsBpF,EAAAA,EAAAA,IAAH,8DAKnBqF,GAAoBrF,EAAAA,EAAAA,IAAH,oGAOjBsF,GAAatF,EAAAA,EAAAA,EAAH,sH,gCCkCvB,GAnCqB,WACnB,OAAsBuF,EAAAA,GAAAA,MAAfC,GAAP,eACM7B,GAAWC,EAAAA,EAAAA,MACX6B,GAAaT,EAAAA,EAAAA,IAAYU,GAAAA,GAEzB/E,EAA4C,IAAtB8E,EAAWE,OAEjCC,EAAaH,EAAWI,QAC5B,SAACC,EAAO5B,GAAR,OAAoB4B,EAAQC,OAAO7B,EAAQI,MAAQJ,EAAQX,SAA3D,GACA,GAQF,OACE,UAAC6B,GAAD,YACE,SAAC,MAAD,wFAGA,SAAC1E,EAAD,CACEC,oBAAqBA,EACrBC,aAZoB,SAAAoF,GACxBR,EAAY,CAAEQ,aAAAA,EAAcP,WAAAA,EAAYG,WAAAA,IACxCjC,GAASsC,EAAAA,EAAAA,MACV,KAWKtF,IAAuB,SAACmE,GAAD,KACzB,SAACO,GAAD,WACE,UAACC,GAAD,4BACe,4BAAOd,KAAKC,MAAMmB,GAAlB,oBAKtB,C,wGC7CYM,EAAelG,EAAAA,EAAAA,IAAH,uHAOZmG,EAAUnG,EAAAA,EAAAA,IAAH,yW","sources":["components/StorePage/ShopsList/ShopsList.styled.jsx","components/ShoppingCart/OrderForm/OrderForm.styled.jsx","components/ShoppingCart/OrderForm/OrderForm.jsx","components/ShoppingCart/ShoppingCartList/ShoppingCartList.styled.jsx","components/ShoppingCart/ShoppingCartItem/ShoppingCartItem.styled.jsx","components/ShoppingCart/QuantityCounter/QuantityCounter.styled.jsx","components/ShoppingCart/QuantityCounter/QuantityCounter.jsx","components/ShoppingCart/ShoppingCartItem/ShoppingCartItem.jsx","components/ShoppingCart/ShoppingCartList/ShoppingCartList.jsx","pages/ShoppingCart/ShoppingCart.styled.jsx","pages/ShoppingCart/ShoppingCart.jsx","pages/Store/Store.styled.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-shrink: 0;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ListItem = styled.li`\n  padding: 10px 0;\n  width: 100%;\n`;\n\nexport const CategoryLink = styled(NavLink)`\n  text-transform: uppercase;\n  text-decoration: none;\n  display: flex;\n  gap: 10px;\n  padding-bottom: 5px;\n  align-items: center;\n  border-bottom: 3px solid transparent;\n  &.active {\n    color: var(--brand-color);\n    border-bottom: 3px solid var(--brand-color);\n  }\n`;\n\nexport const Info = styled.div`\n  border-radius: 15px;\n  width: 100%;\n  padding: 15px;\n  background-color: #61dbfb44;\n`;\n","import styled from '@emotion/styled';\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-self: flex-start;\n  justify-content: center;\n  gap: 10px;\n\n  width: 100%;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  border-radius: 10px;\n  width: 100%;\n  color: var(--primary-white-color);\n  font-size: 24px;\n  background-color: transparent;\n  border: 1px solid var(--brand-color);\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 24px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  color: red;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: #61dbfb22;\n`;\n\nexport const SubmitButton = styled.button`\n  border-radius: 15px;\n  padding: 10px;\n  font-size: 20px;\n  text-align: center;\n  color: var(--brand-color);\n  border: 2px solid var(--brand-color);\n  background-color: transparent;\n  transition: color 200ms linear, background-color 200ms linear;\n\n  &:hover,\n  &:focus {\n    color: var(--primary-white-color);\n    border: 2px solid var(--primary-white-color);\n  }\n  &:disabled {\n    cursor: not-allowed;\n    border: 2px solid #000000cc;\n    color: #000000cc;\n    background-color: #00000011;\n  }\n`;\n","import {\n  AppForm,\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n} from './OrderForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { SideBar } from 'pages/Store/Store.styled';\n\nexport const OrderForm = ({ isShoppingCartEmpty, onFormSubmit }) => {\n  const nameID = nanoid();\n  const numberID = nanoid();\n  const emailID = nanoid();\n  const addressID = nanoid();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: yup\n      .string()\n      .matches(\n        '^[+]?[(]?[0-9]{1,4}[)]?[-s.]?[0-9]{1,4}[-s.]?[0-9]{1,6}$',\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n    email: yup\n      .string()\n      .matches('[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$', 'Wrong email format')\n      .required(),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  return (\n    <SideBar>\n      <AppForm\n        autoComplete=\"off\"\n        onSubmit={handleSubmit(data => {\n          reset({ name: '', number: '', address: '', email: '' });\n          onFormSubmit(data);\n        })}\n      >\n        <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n        <FormInput\n          type=\"text\"\n          {...register('name')}\n          id={nameID}\n          placeholder=\"Name Surname\"\n        />\n        {errors.name && <ErrMessage>{errors.name.message}</ErrMessage>}\n        <FormInputLabel htmlFor={numberID}>Number</FormInputLabel>\n        <FormInput\n          type=\"text\"\n          {...register('number')}\n          id={numberID}\n          placeholder=\"0800500609\"\n        />\n        {errors.number && <ErrMessage>{errors.number.message}</ErrMessage>}\n        <FormInputLabel htmlFor={emailID}>email</FormInputLabel>\n        <FormInput\n          type=\"text\"\n          {...register('email')}\n          id={emailID}\n          placeholder=\"email@e.mail\"\n        />\n        {errors.email && <ErrMessage>{errors.email.message}</ErrMessage>}\n        <FormInputLabel htmlFor={addressID}>address</FormInputLabel>\n        <FormInput\n          type=\"text\"\n          {...register('address')}\n          id={addressID}\n          placeholder=\"street 8, City, Country\"\n        />\n        {errors.address && <ErrMessage>{errors.address.message}</ErrMessage>}\n        <SubmitButton type=\"submit\" disabled={isShoppingCartEmpty}>\n          Submit\n        </SubmitButton>\n      </AppForm>\n    </SideBar>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 20px;\n  gap: 15px;\n  flex-wrap: wrap;\n  height: 80vh;\n  width: 77%;\n  overflow-y: scroll;\n`;\n","import styled from '@emotion/styled';\n\nexport const ProductCard = styled.li`\n  box-shadow: black 0px 0px 10px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  width: 270px;\n  border-radius: 15px;\n  border: 2px solid var(--brand-color);\n  overflow: hidden;\n  &:hover p {\n    cursor: pointer;\n    transform: translateY(0%);\n  }\n`;\n\nexport const CardImage = styled.img`\n  width: 100%;\n  height: 250px;\n  margin-bottom: 10px;\n`;\n\nexport const CardTitle = styled.h3`\n  padding: 0 10px;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const CardDescription = styled.p`\n  padding: 10px;\n  margin-bottom: 10px;\n  font-size: 14px;\n  position: absolute;\n  top: 0;\n  transform: translateY(-100%);\n  transition: transform 250ms linear;\n\n  background-color: #000000cc;\n`;\n\nexport const PurchaseWrapper = styled.div`\n  display: flex;\n  padding: 10px;\n  justify-content: space-between;\n  margin-top: auto;\n`;\n\nexport const CardPrice = styled.p`\n  font-size: 24px;\n  color: #00d000;\n`;\n\nexport const AddToCartButton = styled.button`\n  border-radius: 15px;\n  padding: 10px;\n  font-size: 20px;\n  text-align: center;\n  color: var(--brand-color);\n  border: 2px solid var(--brand-color);\n  background-color: transparent;\n  transition: color 200ms linear, background-color 200ms linear;\n\n  &:hover,\n  &:focus {\n    color: var(--primary-white-color);\n    border: 2px solid var(--primary-white-color);\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const CounterWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 0 auto;\n  gap: 10px;\n  width: 120px;\n  border-radius: 20px;\n  background-color: #61dbfb44;\n`;\n\nexport const ChangeQuantityButton = styled.button`\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  padding-top: 7px;\n  font-size: 24px;\n  font-weight: 700;\n  text-align: center;\n  background-color: transparent;\n  color: var(--primary-white-color);\n  border: 1px solid var(--primary-white-color);\n  transition: background-color 250ms linear, border-color 250ms linear,\n    color 250ms linear;\n\n  &:hover,\n  &:focus {\n    color: var(--brand-color);\n  }\n  &:disabled {\n    background-color: #00000066;\n    color: #00000066;\n    border: 1px solid #00000066;\n  }\n`;\n\nexport const Counter = styled.p`\n  font-size: 22px;\n  color: var(--primart-white-color);\n`;\n","import { useDispatch } from 'react-redux';\nimport {\n  Counter,\n  ChangeQuantityButton,\n  CounterWrapper,\n} from './QuantityCounter.styled';\nimport { BsCartPlus, BsCartDash } from 'react-icons/bs';\n\nimport { changeQuantity } from 'redux/shoppingCartSlice';\nimport { useEffect, useState } from 'react';\n\nexport const QuantityCounter = ({ id, quantity }) => {\n  const [counterValue, setCounterValue] = useState(quantity);\n  const dispatch = useDispatch();\n  const isProductOneInCart = counterValue === 1;\n\n  useEffect(() => {\n    dispatch(changeQuantity(id, counterValue));\n  }, [counterValue, dispatch, id]);\n\n  return (\n    <CounterWrapper>\n      <ChangeQuantityButton\n        onClick={() => {\n          setCounterValue(counterValue + 1);\n        }}\n      >\n        <BsCartPlus />\n      </ChangeQuantityButton>\n      <Counter>{counterValue}</Counter>\n      <ChangeQuantityButton\n        onClick={() => {\n          setCounterValue(counterValue - 1);\n        }}\n        disabled={isProductOneInCart}\n      >\n        <BsCartDash />\n      </ChangeQuantityButton>\n    </CounterWrapper>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport {\n  AddToCartButton,\n  CardDescription,\n  CardImage,\n  CardPrice,\n  CardTitle,\n  ProductCard,\n  PurchaseWrapper,\n} from './ShoppingCartItem.styled';\nimport { BsCartX } from 'react-icons/bs';\nimport { deleteProduct } from 'redux/shoppingCartSlice';\nimport { QuantityCounter } from '../QuantityCounter/QuantityCounter';\n\nexport const ShoppingCartItem = ({ product }) => {\n  const dispatch = useDispatch();\n\n  const { image, title, id, quantity, description, price } = product;\n\n  const productTotalPrice = Math.round(quantity * price);\n\n  return (\n    <ProductCard>\n      <CardImage src={image} alt={title} width=\"100%\" />\n      <CardTitle>{title}</CardTitle>\n      <CardDescription>{description}</CardDescription>\n      <QuantityCounter quantity={quantity} id={id} />\n      <PurchaseWrapper>\n        <span>\n          Price: <CardPrice>{Math.round(productTotalPrice)} ₴</CardPrice>\n        </span>\n        <AddToCartButton\n          onClick={() => {\n            dispatch(deleteProduct(id));\n          }}\n        >\n          Remove <BsCartX />\n        </AddToCartButton>\n      </PurchaseWrapper>\n    </ProductCard>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { List } from './ShoppingCartList.styled';\nimport { ShoppingCartItem } from 'components/ShoppingCart/ShoppingCartItem/ShoppingCartItem';\n\nexport const ShoppingCartList = () => {\n  const products = useSelector(state => state.shoppingCart);\n\n  return (\n    <List>\n      {products.map(product => (\n        <ShoppingCartItem key={product.id} product={product} />\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ShoppingCartWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const TotalPriceWrapper = styled.div`\n  flex-shrink: 0;\n  width: 100%;\n  text-align: left;\n  padding: 0 10px;\n`;\n\nexport const TotalPrice = styled.p`\n  font-size: 32px;\n  color: var(--primary-white-color);\n  span {\n    color: #00d000;\n  }\n`;\n","import { OrderForm } from 'components/ShoppingCart/OrderForm/OrderForm';\nimport { ShoppingCartList } from 'components/ShoppingCart/ShoppingCartList/ShoppingCartList';\nimport {\n  ShoppingCartWrapper,\n  TotalPrice,\n  TotalPriceWrapper,\n} from './ShoppingCart.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCreateOrderMutation } from 'redux/ordersSlice';\nimport { clearShoppingCart } from 'redux/shoppingCartSlice';\nimport { getShoppingCart } from 'redux/selectors';\nimport { Info } from 'components/StorePage/ShopsList/ShopsList.styled';\n\nconst ShoppingCart = () => {\n  const [createOrder] = useCreateOrderMutation();\n  const dispatch = useDispatch();\n  const orderItems = useSelector(getShoppingCart);\n\n  const isShoppingCartEmpty = orderItems.length === 0;\n\n  const totalPrice = orderItems.reduce(\n    (total, product) => total + Number(product.price * product.quantity),\n    0\n  );\n\n  const handleCreateOrder = customerData => {\n    createOrder({ customerData, orderItems, totalPrice });\n    dispatch(clearShoppingCart());\n  };\n\n  return (\n    <ShoppingCartWrapper>\n      <Info>\n        We can deliver your order right to your home, please fill the form below\n      </Info>\n      <OrderForm\n        isShoppingCartEmpty={isShoppingCartEmpty}\n        onFormSubmit={handleCreateOrder}\n      />\n      {!isShoppingCartEmpty && <ShoppingCartList />}\n      <TotalPriceWrapper>\n        <TotalPrice>\n          Total price: <span>{Math.round(totalPrice)} ₴</span>\n        </TotalPrice>\n      </TotalPriceWrapper>\n    </ShoppingCartWrapper>\n  );\n};\nexport default ShoppingCart;\n","import styled from '@emotion/styled';\n\nexport const StoreWrapper = styled.div`\n  display: flex;\n  @media screen and (max-width: 1280px) {\n    flex-direction: column;\n  }\n`;\n\nexport const SideBar = styled.div`\n  flex-shrink: 0;\n  width: 260px;\n  padding: 20px;\n  border-right: 1px solid var(--primary-white-color);\n  border-bottom: 1px solid transparent;\n  @media screen and (max-width: 1280px) {\n    width: 100%;\n    max-width: none;\n    border-right: 1px solid transparent;\n    border-bottom: 1px solid var(--primary-white-color);\n  }\n`;\n"],"names":["List","styled","ListItem","CategoryLink","NavLink","Info","AppForm","FormInput","FormInputLabel","ErrMessage","SubmitButton","OrderForm","isShoppingCartEmpty","onFormSubmit","nameID","nanoid","numberID","emailID","addressID","validationSchema","yup","shape","name","matches","required","number","email","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","autoComplete","onSubmit","data","address","htmlFor","type","id","placeholder","message","disabled","ProductCard","CardImage","CardTitle","CardDescription","PurchaseWrapper","CardPrice","AddToCartButton","CounterWrapper","ChangeQuantityButton","Counter","QuantityCounter","quantity","useState","counterValue","setCounterValue","dispatch","useDispatch","isProductOneInCart","useEffect","changeQuantity","onClick","ShoppingCartItem","product","image","title","description","price","productTotalPrice","Math","round","src","alt","width","deleteProduct","ShoppingCartList","products","useSelector","state","shoppingCart","map","ShoppingCartWrapper","TotalPriceWrapper","TotalPrice","useCreateOrderMutation","createOrder","orderItems","getShoppingCart","length","totalPrice","reduce","total","Number","customerData","clearShoppingCart","StoreWrapper","SideBar"],"sourceRoot":""}
{"version":3,"file":"static/js/521.c5908b06.chunk.js","mappings":"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","sources":["components/ShoppingCart/OrderForm/OrderForm.styled.jsx","components/ShoppingCart/OrderForm/OrderForm.jsx","components/ShoppingCart/ShoppingCartList/ShoppingCartList.styled.jsx","components/ShoppingCart/ShoppingCartItem/ShoppingCartItem.styled.jsx","components/ShoppingCart/QuantityCounter/QuantityCounter.styled.jsx","components/ShoppingCart/QuantityCounter/QuantityCounter.jsx","components/ShoppingCart/ShoppingCartItem/ShoppingCartItem.jsx","components/ShoppingCart/ShoppingCartList/ShoppingCartList.jsx","pages/ShoppingCart/ShoppingCart.styled.jsx","pages/ShoppingCart/ShoppingCart.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-self: flex-start;\n  justify-content: center;\n  gap: 10px;\n\n  width: 300px;\n  border: 1px solid black;\n  border-radius: 15px;\n  padding: 15px;\n`;\n\nexport const FormInput = styled.input`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 250px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: transparent;\n  width: 70px;\n  text-align: center;\n  padding: 10px;\n  border-radius: 15px;\n  border: 1px solid #fed800;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: gray;\n    color: #fff;\n  }\n`;\n","import {\n  AppForm,\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n} from './OrderForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nexport const OrderForm = ({ isShoppingCartEmpty, onFormSubmit }) => {\n  const nameID = nanoid();\n  const numberID = nanoid();\n  const emailID = nanoid();\n  const addressID = nanoid();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: yup\n      .string()\n      .matches(\n        '^[+]?[(]?[0-9]{1,4}[)]?[-s.]?[0-9]{1,4}[-s.]?[0-9]{1,6}$',\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n    email: yup\n      .string()\n      .matches('[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$', 'Wrong email format')\n      .required(),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  return (\n    <AppForm\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(data => {\n        reset({ name: '', number: '', address: '', email: '' });\n        onFormSubmit(data);\n      })}\n    >\n      <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n      <FormInput type=\"text\" {...register('name')} id={nameID} />\n      {errors.name && <ErrMessage>{errors.name.message}</ErrMessage>}\n      <FormInputLabel htmlFor={numberID}>Number</FormInputLabel>\n      <FormInput type=\"text\" {...register('number')} id={numberID} />\n      {errors.number && <ErrMessage>{errors.number.message}</ErrMessage>}\n      <FormInputLabel htmlFor={emailID}>email</FormInputLabel>\n      <FormInput type=\"text\" {...register('email')} id={emailID} />\n      {errors.email && <ErrMessage>{errors.email.message}</ErrMessage>}\n      <FormInputLabel htmlFor={addressID}>address</FormInputLabel>\n      <FormInput type=\"text\" {...register('address')} id={addressID} />\n      {errors.address && <ErrMessage>{errors.address.message}</ErrMessage>}\n      <SubmitButton type=\"submit\" disabled={isShoppingCartEmpty}>\n        'Submit'\n      </SubmitButton>\n    </AppForm>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 20px;\n  gap: 15px;\n  flex-wrap: wrap;\n  height: 80vh;\n  max-width: 70%;\n  overflow-y: scroll;\n`;\n","import styled from '@emotion/styled';\n\nexport const ProductCard = styled.li`\n  border-radius: 15px;\n  padding: 15px;\n  border: 1px solid black;\n  overflow: hidden;\n  margin-bottom: 10px;\n  width: 45%;\n`;\n\nexport const CardTitle = styled.h3`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const CardDescription = styled.p`\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n\nexport const PurchaseWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-self: flex-end;\n  align-items: center;\n`;\n\nexport const CardPrice = styled.p`\n  font-size: 20px;\n  color: green;\n`;\n\nexport const AddToCartButton = styled.button`\n  border-radius: 15px;\n  padding: 15px;\n  font-size: 20px;\n  text-align: center;\n`;\n","import styled from '@emotion/styled';\n\nexport const ChangeQuantityButton = styled.button`\n  border-radius: 50%;\n  font-size: 20px;\n  text-align: center;\n`;\n\nexport const Counter = styled.p`\n  font-size: 18px;\n  color: red;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Counter, ChangeQuantityButton } from './QuantityCounter.styled';\nimport { changeQuantity } from 'redux/shoppingCartSlice';\nimport { useEffect, useRef, useState } from 'react';\n\nexport const QuantityCounter = ({ id, quantity }) => {\n  const [counterValue, setCounterValue] = useState(quantity);\n  const isFirstRender = useRef(true);\n  const dispatch = useDispatch();\n  const isProductOneInCart = counterValue === 1;\n\n  useEffect(() => {\n    if (isFirstRender) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    dispatch(changeQuantity(id, counterValue));\n  }, [counterValue, dispatch, id]);\n\n  return (\n    <>\n      <ChangeQuantityButton\n        onClick={() => {\n          setCounterValue(counterValue + 1);\n        }}\n      >\n        +\n      </ChangeQuantityButton>\n      <Counter>{counterValue}</Counter>\n      <ChangeQuantityButton\n        onClick={() => {\n          setCounterValue(counterValue - 1);\n        }}\n        disabled={isProductOneInCart}\n      >\n        -\n      </ChangeQuantityButton>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport {\n  AddToCartButton,\n  CardDescription,\n  CardPrice,\n  CardTitle,\n  ProductCard,\n  PurchaseWrapper,\n} from './ShoppingCartItem.styled';\nimport { deleteProduct } from 'redux/shoppingCartSlice';\nimport { QuantityCounter } from '../QuantityCounter/QuantityCounter';\n\nexport const ShoppingCartItem = ({ product }) => {\n  const dispatch = useDispatch();\n\n  const { image, title, id, quantity, description, price } = product;\n\n  const productTotalPrice = Math.round(quantity * price);\n\n  return (\n    <ProductCard>\n      <img src={image} alt={title} width=\"100%\" />\n      <CardTitle>{title}</CardTitle>\n      <CardDescription>{description}</CardDescription>\n      <QuantityCounter quantity={quantity} id={id} />\n      <PurchaseWrapper>\n        <CardPrice>Price: {productTotalPrice} ₴</CardPrice>\n        <AddToCartButton\n          onClick={() => {\n            dispatch(deleteProduct(id));\n          }}\n        >\n          Delete from my cart\n        </AddToCartButton>\n      </PurchaseWrapper>\n    </ProductCard>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { List } from './ShoppingCartList.styled';\nimport { ShoppingCartItem } from 'components/ShoppingCart/ShoppingCartItem/ShoppingCartItem';\n\nexport const ShoppingCartList = () => {\n  const products = useSelector(state => state.shoppingCart);\n\n  return (\n    <List>\n      {products.map(product => (\n        <ShoppingCartItem key={product.id} product={product} />\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ShoppingCartWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const TotalPriceWrapper = styled.div`\n  width: 100%;\n  text-align: right;\n`;\n\nexport const TotalPrice = styled.p`\n  font-size: 32px;\n  color: red;\n`;\n","import { OrderForm } from 'components/ShoppingCart/OrderForm/OrderForm';\nimport { ShoppingCartList } from 'components/ShoppingCart/ShoppingCartList/ShoppingCartList';\nimport {\n  ShoppingCartWrapper,\n  TotalPrice,\n  TotalPriceWrapper,\n} from './ShoppingCart.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCreateOrderMutation } from 'redux/ordersSlice';\nimport { clearShoppingCart } from 'redux/shoppingCartSlice';\nimport { getShoppingCart } from 'redux/selectors';\n\nconst ShoppingCart = () => {\n  const [createOrder] = useCreateOrderMutation();\n  const dispatch = useDispatch();\n  const orderItems = useSelector(getShoppingCart);\n\n  const isShoppingCartEmpty = orderItems.length === 0;\n\n  const totalPrice = orderItems.reduce(\n    (total, product) => total + Number(product.price * product.quantity),\n    0\n  );\n\n  const handleCreateOrder = customerData => {\n    createOrder({ customerData, orderItems, totalPrice });\n    dispatch(clearShoppingCart());\n  };\n\n  return (\n    <ShoppingCartWrapper>\n      <OrderForm\n        isShoppingCartEmpty={isShoppingCartEmpty}\n        onFormSubmit={handleCreateOrder}\n      />\n      {!isShoppingCartEmpty && <ShoppingCartList />}\n      <TotalPriceWrapper>\n        <TotalPrice>Total price: {Math.round(totalPrice)} ₴</TotalPrice>\n      </TotalPriceWrapper>\n    </ShoppingCartWrapper>\n  );\n};\nexport default ShoppingCart;\n"],"names":["AppForm","styled","FormInput","FormInputLabel","ErrMessage","SubmitButton","OrderForm","isShoppingCartEmpty","onFormSubmit","nameID","nanoid","numberID","emailID","addressID","validationSchema","yup","shape","name","matches","required","number","email","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","autoComplete","onSubmit","data","address","htmlFor","type","id","message","disabled","List","ProductCard","CardTitle","CardDescription","PurchaseWrapper","CardPrice","AddToCartButton","ChangeQuantityButton","Counter","QuantityCounter","quantity","useState","counterValue","setCounterValue","isFirstRender","useRef","dispatch","useDispatch","isProductOneInCart","useEffect","current","changeQuantity","onClick","ShoppingCartItem","product","image","title","description","price","productTotalPrice","Math","round","src","alt","width","deleteProduct","ShoppingCartList","products","useSelector","state","shoppingCart","map","ShoppingCartWrapper","TotalPriceWrapper","TotalPrice","useCreateOrderMutation","createOrder","orderItems","getShoppingCart","length","totalPrice","reduce","total","Number","customerData","clearShoppingCart"],"sourceRoot":""}
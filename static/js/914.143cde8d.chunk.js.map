{"version":3,"file":"static/js/914.143cde8d.chunk.js","mappings":"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","sources":["components/ShoppingCart/ShoppingCartList/EmptyList.jsx","components/ShoppingCart/ShoppingCartList/ShoppingCartList.styled.jsx","components/StorePage/ShopsList/ShopsList.styled.jsx","components/MyOrders/MyOrdersForm/MyOrdersForm.styled.jsx","components/MyOrders/MyOrdersForm/MyOrdersForm.jsx","components/MyOrders/MyOrdersList/MyOrdersList.styled.jsx","components/MyOrders/MyOrderItem/MyOrderItem.styled.jsx","components/MyOrders/MyOrderItem/MyOrderItem.jsx","components/MyOrders/MyOrdersList/MyOrdersList.jsx","pages/MyOrders/MyOrders.styled.jsx","pages/MyOrders/MyOrders.jsx","pages/Store/Store.styled.jsx"],"sourcesContent":["import { BsCartPlus } from 'react-icons/bs';\nimport {\n  EmptyInfo,\n  EmptyListWrapper,\n  LinkToHome,\n} from './ShoppingCartList.styled';\n\nexport const EmptyList = ({ info }) => {\n  return (\n    <EmptyListWrapper>\n      <LinkToHome to=\"/\">\n        <BsCartPlus size=\"150px\" />\n      </LinkToHome>\n      <EmptyInfo>{info}</EmptyInfo>\n    </EmptyListWrapper>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  margin: 0 auto;\n  align-items: flex-start;\n  justify-content: center;\n  padding: 20px;\n  gap: 15px;\n  flex-wrap: wrap;\n  height: 80vh;\n  width: 77%;\n  overflow-y: scroll;\n`;\n\nexport const EmptyListWrapper = styled.section`\n  padding: 40px;\n  margin: auto;\n  text-align: center;\n`;\n\nexport const LinkToHome = styled(Link)`\n  border: none;\n  background-color: transparent;\n  display: block;\n  margin-bottom: 20px;\n  &:hover,\n  &:focus {\n    color: var(--brand-color);\n  }\n`;\nexport const EmptyInfo = styled.p`\n  font-size: 24px;\n`;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-shrink: 0;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ListItem = styled.li`\n  padding: 10px 0;\n  width: 100%;\n`;\n\nexport const CategoryLink = styled(NavLink)`\n  text-transform: uppercase;\n  text-decoration: none;\n  display: flex;\n  gap: 10px;\n  padding-bottom: 5px;\n  align-items: center;\n  border-bottom: 3px solid transparent;\n  &.active {\n    color: var(--brand-color);\n    border-bottom: 3px solid var(--brand-color);\n  }\n`;\n\nexport const Info = styled.div`\n  border-radius: 15px;\n  width: 100%;\n  padding: 15px;\n  background-color: #61dbfb44;\n`;\n","import styled from '@emotion/styled';\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-self: flex-start;\n  justify-content: center;\n  gap: 10px;\n\n  width: 100%;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  border-radius: 10px;\n  width: 100%;\n  color: var(--primary-white-color);\n  font-size: 24px;\n  background-color: transparent;\n  border: 1px solid var(--brand-color);\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 24px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  color: red;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: #61dbfb22;\n`;\n\nexport const SubmitButton = styled.button`\n  border-radius: 15px;\n  padding: 10px;\n  font-size: 20px;\n  text-align: center;\n  color: var(--brand-color);\n  border: 2px solid var(--brand-color);\n  background-color: transparent;\n  transition: color 200ms linear, background-color 200ms linear;\n\n  &:hover,\n  &:focus {\n    color: var(--primary-white-color);\n    border: 2px solid var(--primary-white-color);\n  }\n  &:disabled {\n    cursor: not-allowed;\n    border: 2px solid #000000cc;\n    color: #000000cc;\n    background-color: #00000011;\n  }\n`;\n","import {\n  AppForm,\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n} from './MyOrdersForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nexport const MyOrdersForm = ({ onFormSubmit }) => {\n  const numberID = nanoid();\n  const emailID = nanoid();\n\n  const validationSchema = yup.object().shape({\n    number: yup\n      .string()\n      .matches(\n        '^[+]?[(]?[0-9]{1,4}[)]?[-s.]?[0-9]{1,4}[-s.]?[0-9]{1,6}$',\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n    email: yup\n      .string()\n      .matches('[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$', 'Wrong email format')\n      .required(),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  return (\n    <AppForm\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(data => {\n        reset({ number: '', email: '' });\n        onFormSubmit(data);\n      })}\n    >\n      <FormInputLabel htmlFor={numberID}>Number</FormInputLabel>\n      <FormInput type=\"text\" {...register('number')} id={numberID} />\n      {errors.number && <ErrMessage>{errors.number.message}</ErrMessage>}\n      <FormInputLabel htmlFor={emailID}>email</FormInputLabel>\n      <FormInput type=\"text\" {...register('email')} id={emailID} />\n      {errors.email && <ErrMessage>{errors.email.message}</ErrMessage>}\n      <SubmitButton type=\"submit\">Submit</SubmitButton>\n    </AppForm>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  margin: 0 auto;\n  padding: 20px;\n  gap: 15px;\n  flex-wrap: wrap;\n  height: 80vh;\n  max-width: 77%;\n  overflow-y: scroll;\n`;\n","import styled from '@emotion/styled';\n\nexport const ProductCard = styled.li`\n  width: 100%;\n  border: 1px solid var(--brand-color);\n  border-radius: 15px;\n  overflow: hidden;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10;\n`;\n\nexport const ItemsList = styled.ul`\n  display: flex;\n  padding: 20px;\n  gap: 20px;\n  @media screen and (max-width: 1280px) {\n    /* flex-direction: column; */\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n`;\n\nexport const OrderItem = styled.li`\n  position: relative;\n  overflow: hidden;\n  border-radius: 15px;\n\n  &:hover div {\n    cursor: pointer;\n    transform: translateY(0%);\n  }\n`;\n\nexport const ItemImage = styled.img`\n  width: 100px;\n  height: 100px;\n`;\n\nexport const CardTitle = styled.h3`\n  padding: 10px;\n  font-size: 12px;\n  width: 100px;\n`;\n\nexport const PurchaseWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  width: 100px;\n  padding: 15px;\n  font-size: 12px;\n  background-color: #000000cc;\n  transform: translateY(-100%);\n  transition: transform 250ms linear;\n`;\n\nexport const CardPrice = styled.p`\n  color: #00d000;\n`;\n\nexport const DateWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 20px;\n  font-size: 24px;\n  @media screen and (max-width: 1280px) {\n    font-size: 16px;\n  }\n`;\n\nexport const OrderTotalPrice = styled.span`\n  font-size: 32px;\n  color: #00d000;\n  text-align: right;\n`;\n","import {\n  CardPrice,\n  CardTitle,\n  ItemImage,\n  ItemsList,\n  OrderItem,\n  ProductCard,\n  PurchaseWrapper,\n  OrderTotalPrice,\n  DateWrapper,\n} from './MyOrderItem.styled';\n\nexport const MyOrderItem = ({ order }) => {\n  const { orderItems, totalPrice, createdAt } = order;\n  const date = new Date(createdAt);\n\n  return (\n    <ProductCard>\n      <ItemsList>\n        {orderItems.map(orderItem => (\n          <OrderItem key={orderItem.id}>\n            <ItemImage\n              src={orderItem.images[0].sm}\n              alt={orderItem.name}\n              width=\"100px\"\n            />\n            <CardTitle>{orderItem.name}</CardTitle>\n            <PurchaseWrapper>\n              <CardPrice>Price: {orderItem.price} ₴</CardPrice>\n              <CardPrice>Quantity: {orderItem.quantity} pcs.</CardPrice>\n            </PurchaseWrapper>\n          </OrderItem>\n        ))}\n      </ItemsList>\n      <DateWrapper>\n        <p>{date.toLocaleDateString()}</p>\n        <p>\n          Total order price: <OrderTotalPrice>{totalPrice}₴</OrderTotalPrice>\n        </p>\n      </DateWrapper>\n    </ProductCard>\n  );\n};\n","import { List } from './MyOrdersList.styled';\nimport { MyOrderItem } from 'components/MyOrders/MyOrderItem/MyOrderItem';\n\nexport const MyOrdersList = ({ ordersList }) => {\n  return (\n    <List>\n      {ordersList.map(order => (\n        <MyOrderItem key={order.id} order={order} />\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const MyOrdersWrapper = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  @media screen and (max-width: 1280px) {\n    flex-direction: column;\n    justify-content: center;\n  }\n`;\n\nexport const TryAgainButton = styled.button`\n  border-radius: 15px;\n  padding: 10px;\n  margin-top: 10px;\n  width: 100%;\n  font-size: 20px;\n  text-align: center;\n  color: var(--brand-color);\n  border: 2px solid var(--brand-color);\n  background-color: transparent;\n  transition: color 200ms linear, background-color 200ms linear;\n\n  &:hover,\n  &:focus {\n    color: var(--primary-white-color);\n    border: 2px solid var(--primary-white-color);\n  }\n  &:disabled {\n    cursor: not-allowed;\n    border: 2px solid #000000cc;\n    color: #000000cc;\n    background-color: #00000011;\n  }\n`;\n","import { MyOrdersForm } from 'components/MyOrders/MyOrdersForm/MyOrdersForm';\nimport { MyOrdersList } from 'components/MyOrders/MyOrdersList/MyOrdersList';\nimport { EmptyList } from 'components/ShoppingCart/ShoppingCartList/EmptyList';\nimport { Info } from 'components/StorePage/ShopsList/ShopsList.styled';\nimport { MyOrdersWrapper, TryAgainButton } from './MyOrders.styled';\nimport { useState } from 'react';\nimport { useGetAllOrdersQuery } from 'redux/ordersSlice';\nimport { notification } from 'components/SharedLayout/notification';\nimport { SideBar } from 'pages/Store/Store.styled';\n\nconst MyOrders = () => {\n  const { data, isError } = useGetAllOrdersQuery();\n  const [customerOrders, setCustomerOrders] = useState([]);\n  const [customerNumber, setCustomerNumber] = useState(null);\n\n  if (isError) {\n    console.warn(isError.message);\n    notification();\n  }\n\n  const getOrdersByCustomerData = ({ number, email }) => {\n    setCustomerNumber(number);\n    const customerOrders = data.filter(\n      ({ customerData }) =>\n        customerData.number === number && customerData.email === email\n    );\n    setCustomerOrders(customerOrders);\n  };\n\n  const isOrders = customerOrders.length !== 0;\n\n  return (\n    <MyOrdersWrapper>\n      {!isOrders && !customerNumber && (\n        <Info>\n          Have you ordered burgers before? Let's see your order history. Please\n          fill the form below.\n        </Info>\n      )}\n      <SideBar>\n        {isOrders || customerNumber ? (\n          <>\n            <Info>There are your orders</Info>\n            <TryAgainButton\n              onClick={() => {\n                setCustomerNumber(null);\n                setCustomerOrders([]);\n              }}\n            >\n              Try another\n            </TryAgainButton>\n          </>\n        ) : (\n          !customerNumber && (\n            <MyOrdersForm onFormSubmit={getOrdersByCustomerData} />\n          )\n        )}\n      </SideBar>\n      {isOrders ? (\n        <MyOrdersList ordersList={customerOrders} />\n      ) : (\n        customerNumber && (\n          <EmptyList info=\"Your order history is empty yet. Let's go shopping...\" />\n        )\n      )}\n    </MyOrdersWrapper>\n  );\n};\n\nexport default MyOrders;\n","import styled from '@emotion/styled';\n\nexport const StoreWrapper = styled.section`\n  display: flex;\n  @media screen and (max-width: 1280px) {\n    flex-direction: column;\n    justify-content: center;\n  }\n`;\n\nexport const SideBar = styled.aside`\n  flex-shrink: 0;\n  width: 260px;\n  padding: 20px;\n  border-right: 1px solid var(--primary-white-color);\n  border-bottom: 1px solid transparent;\n  @media screen and (max-width: 1280px) {\n    width: 100%;\n    max-width: none;\n    border-right: 1px solid transparent;\n    border-bottom: 1px solid var(--primary-white-color);\n  }\n`;\n"],"names":["EmptyList","info","to","size","List","styled","EmptyListWrapper","LinkToHome","Link","EmptyInfo","ListItem","CategoryLink","NavLink","Info","AppForm","FormInput","FormInputLabel","ErrMessage","SubmitButton","MyOrdersForm","onFormSubmit","numberID","nanoid","emailID","validationSchema","yup","shape","number","matches","required","email","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","autoComplete","onSubmit","data","htmlFor","type","id","message","ProductCard","ItemsList","OrderItem","ItemImage","CardTitle","PurchaseWrapper","CardPrice","DateWrapper","OrderTotalPrice","MyOrderItem","order","orderItems","totalPrice","createdAt","date","Date","map","orderItem","src","images","sm","alt","name","width","price","quantity","toLocaleDateString","MyOrdersList","ordersList","MyOrdersWrapper","TryAgainButton","useGetAllOrdersQuery","isError","useState","customerOrders","setCustomerOrders","customerNumber","setCustomerNumber","console","warn","notification","isOrders","length","onClick","filter","customerData","StoreWrapper","SideBar"],"sourceRoot":""}